// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vinyl: (where?: VinylWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vinyl: (where: VinylWhereUniqueInput) => VinylNullablePromise;
  vinyls: (args?: {
    where?: VinylWhereInput;
    orderBy?: VinylOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vinyl>;
  vinylsConnection: (args?: {
    where?: VinylWhereInput;
    orderBy?: VinylOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VinylConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVinyl: (data: VinylCreateInput) => VinylPromise;
  updateVinyl: (args: {
    data: VinylUpdateInput;
    where: VinylWhereUniqueInput;
  }) => VinylPromise;
  updateManyVinyls: (args: {
    data: VinylUpdateManyMutationInput;
    where?: VinylWhereInput;
  }) => BatchPayloadPromise;
  upsertVinyl: (args: {
    where: VinylWhereUniqueInput;
    create: VinylCreateInput;
    update: VinylUpdateInput;
  }) => VinylPromise;
  deleteVinyl: (where: VinylWhereUniqueInput) => VinylPromise;
  deleteManyVinyls: (where?: VinylWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vinyl: (
    where?: VinylSubscriptionWhereInput
  ) => VinylSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VinylOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VinylWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  AND?: Maybe<VinylWhereInput[] | VinylWhereInput>;
  OR?: Maybe<VinylWhereInput[] | VinylWhereInput>;
  NOT?: Maybe<VinylWhereInput[] | VinylWhereInput>;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  vinyls_every?: Maybe<VinylWhereInput>;
  vinyls_some?: Maybe<VinylWhereInput>;
  vinyls_none?: Maybe<VinylWhereInput>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type VinylWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  vinyls?: Maybe<VinylCreateManyWithoutArtistsInput>;
}

export interface VinylCreateManyWithoutArtistsInput {
  create?: Maybe<
    VinylCreateWithoutArtistsInput[] | VinylCreateWithoutArtistsInput
  >;
  connect?: Maybe<VinylWhereUniqueInput[] | VinylWhereUniqueInput>;
}

export interface VinylCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ArtistUpdateInput {
  name?: Maybe<String>;
  vinyls?: Maybe<VinylUpdateManyWithoutArtistsInput>;
}

export interface VinylUpdateManyWithoutArtistsInput {
  create?: Maybe<
    VinylCreateWithoutArtistsInput[] | VinylCreateWithoutArtistsInput
  >;
  delete?: Maybe<VinylWhereUniqueInput[] | VinylWhereUniqueInput>;
  connect?: Maybe<VinylWhereUniqueInput[] | VinylWhereUniqueInput>;
  set?: Maybe<VinylWhereUniqueInput[] | VinylWhereUniqueInput>;
  disconnect?: Maybe<VinylWhereUniqueInput[] | VinylWhereUniqueInput>;
  update?: Maybe<
    | VinylUpdateWithWhereUniqueWithoutArtistsInput[]
    | VinylUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | VinylUpsertWithWhereUniqueWithoutArtistsInput[]
    | VinylUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<VinylScalarWhereInput[] | VinylScalarWhereInput>;
  updateMany?: Maybe<
    VinylUpdateManyWithWhereNestedInput[] | VinylUpdateManyWithWhereNestedInput
  >;
}

export interface VinylUpdateWithWhereUniqueWithoutArtistsInput {
  where: VinylWhereUniqueInput;
  data: VinylUpdateWithoutArtistsDataInput;
}

export interface VinylUpdateWithoutArtistsDataInput {
  name?: Maybe<String>;
}

export interface VinylUpsertWithWhereUniqueWithoutArtistsInput {
  where: VinylWhereUniqueInput;
  update: VinylUpdateWithoutArtistsDataInput;
  create: VinylCreateWithoutArtistsInput;
}

export interface VinylScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<VinylScalarWhereInput[] | VinylScalarWhereInput>;
  OR?: Maybe<VinylScalarWhereInput[] | VinylScalarWhereInput>;
  NOT?: Maybe<VinylScalarWhereInput[] | VinylScalarWhereInput>;
}

export interface VinylUpdateManyWithWhereNestedInput {
  where: VinylScalarWhereInput;
  data: VinylUpdateManyDataInput;
}

export interface VinylUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ArtistUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface VinylCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  artists?: Maybe<ArtistCreateManyWithoutVinylsInput>;
}

export interface ArtistCreateManyWithoutVinylsInput {
  create?: Maybe<
    ArtistCreateWithoutVinylsInput[] | ArtistCreateWithoutVinylsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutVinylsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface VinylUpdateInput {
  name?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutVinylsInput>;
}

export interface ArtistUpdateManyWithoutVinylsInput {
  create?: Maybe<
    ArtistCreateWithoutVinylsInput[] | ArtistCreateWithoutVinylsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutVinylsInput[]
    | ArtistUpdateWithWhereUniqueWithoutVinylsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutVinylsInput[]
    | ArtistUpsertWithWhereUniqueWithoutVinylsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateWithWhereUniqueWithoutVinylsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutVinylsDataInput;
}

export interface ArtistUpdateWithoutVinylsDataInput {
  name?: Maybe<String>;
}

export interface ArtistUpsertWithWhereUniqueWithoutVinylsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutVinylsDataInput;
  create: ArtistCreateWithoutVinylsInput;
}

export interface ArtistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  OR?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  NOT?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
}

export interface ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput;
  data: ArtistUpdateManyDataInput;
}

export interface ArtistUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface VinylUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VinylSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VinylWhereInput>;
  AND?: Maybe<VinylSubscriptionWhereInput[] | VinylSubscriptionWhereInput>;
  OR?: Maybe<VinylSubscriptionWhereInput[] | VinylSubscriptionWhereInput>;
  NOT?: Maybe<VinylSubscriptionWhereInput[] | VinylSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Artist {
  id: ID_Output;
  name: String;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  vinyls: <T = FragmentableArray<Vinyl>>(args?: {
    where?: VinylWhereInput;
    orderBy?: VinylOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  vinyls: <T = Promise<AsyncIterator<VinylSubscription>>>(args?: {
    where?: VinylWhereInput;
    orderBy?: VinylOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  vinyls: <T = FragmentableArray<Vinyl>>(args?: {
    where?: VinylWhereInput;
    orderBy?: VinylOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Vinyl {
  id: ID_Output;
  name: String;
}

export interface VinylPromise extends Promise<Vinyl>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VinylSubscription
  extends Promise<AsyncIterator<Vinyl>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VinylNullablePromise
  extends Promise<Vinyl | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VinylConnection {
  pageInfo: PageInfo;
  edges: VinylEdge[];
}

export interface VinylConnectionPromise
  extends Promise<VinylConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VinylEdge>>() => T;
  aggregate: <T = AggregateVinylPromise>() => T;
}

export interface VinylConnectionSubscription
  extends Promise<AsyncIterator<VinylConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VinylEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVinylSubscription>() => T;
}

export interface VinylEdge {
  node: Vinyl;
  cursor: String;
}

export interface VinylEdgePromise extends Promise<VinylEdge>, Fragmentable {
  node: <T = VinylPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VinylEdgeSubscription
  extends Promise<AsyncIterator<VinylEdge>>,
    Fragmentable {
  node: <T = VinylSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVinyl {
  count: Int;
}

export interface AggregateVinylPromise
  extends Promise<AggregateVinyl>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVinylSubscription
  extends Promise<AsyncIterator<AggregateVinyl>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface VinylSubscriptionPayload {
  mutation: MutationType;
  node: Vinyl;
  updatedFields: String[];
  previousValues: VinylPreviousValues;
}

export interface VinylSubscriptionPayloadPromise
  extends Promise<VinylSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VinylPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VinylPreviousValuesPromise>() => T;
}

export interface VinylSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VinylSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VinylSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VinylPreviousValuesSubscription>() => T;
}

export interface VinylPreviousValues {
  id: ID_Output;
  name: String;
}

export interface VinylPreviousValuesPromise
  extends Promise<VinylPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface VinylPreviousValuesSubscription
  extends Promise<AsyncIterator<VinylPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vinyl",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://prisma:3060`
});
export const prisma = new Prisma();
